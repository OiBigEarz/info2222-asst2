<!-- 
Sign up page, pretty much the same as login.
-->
{% extends 'base.jinja' %}


{% block content %} 
    <h1>Sign Up</h1>
    <p>Username</p>
    <input id="username"/>
    <p>Password</p>
    <input id="password" type="password"/>
    <button onclick="signup()">Sign up</button>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js"></script>
    <script>

         function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }


        function initDatabase() {
            return new Promise((resolve, reject) => {
                const request = indexedDB.open("chatAppDB", 1);  // Ensure the database name and version are consistent

                request.onupgradeneeded = function(event) {
                    const db = event.target.result;
                    if (!db.objectStoreNames.contains("keys")) {
                        db.createObjectStore("keys", { keyPath: "username" });
                    }
                };

                request.onsuccess = function() {
                    resolve(request.result);
                };

                request.onerror = function(event) {
                    console.error("Database error: " + event.target.errorCode);
                    reject(event.target.error);
                };
            });
        }

        async function deriveSalt(username) {
            const encoder = new TextEncoder();
            const hashBuffer = await window.crypto.subtle.digest('SHA-256', encoder.encode(username));
            return new Uint8Array(hashBuffer).slice(0, 16);  // Using a part of hash as salt
        }

        async function deriveKey(password, salt) {
            const encoder = new TextEncoder();
            const keyMaterial = await window.crypto.subtle.importKey(
                "raw",
                encoder.encode(password),
                "PBKDF2",
                false,
                ["deriveBits", "deriveKey"]
            );
            const key = await window.crypto.subtle.deriveKey(
                {
                    name: "PBKDF2",
                    salt: salt,
                    iterations: 100000,
                    hash: "SHA-256"
                },
                keyMaterial,
                { name: "AES-GCM", length: 256 },
                true,
                ["encrypt", "decrypt"]
            );
            return key;
        }

        async function storePrivateKey(username, privateKeyBase64) {
            const db = await initDatabase();  // Ensure the database is ready
            return new Promise((resolve, reject) => {
                const transaction = db.transaction(["keys"], "readwrite");
                const store = transaction.objectStore("keys");
                const request = store.put({ username: username, privateKey: privateKeyBase64 });
                request.onsuccess = function() {
                    console.log("Private key stored successfully for", username);
                    resolve();
                };
                request.onerror = function(event) {
                    console.error("Error storing private key:", event.target.error);
                    reject(event.target.error);
                };
            });
        }

        async function signup() {
            let username = $("#username").val();
            let password = $("#password").val();

            // Derive salt deterministically from the username
            const salt = await deriveSalt(username);
            console.log("Salt derived from username:", salt);

            // Derive AES key from password and salt for symmetric encryption
            const aesKey = await deriveKey(password, salt);
            const aesKeyExported = await window.crypto.subtle.exportKey("raw", aesKey);
            const aesKeyBase64 = btoa(String.fromCharCode(...new Uint8Array(aesKeyExported)));
            console.log("AES Key exported in Base64:", aesKeyBase64);

            // Generate RSA key pair for asymmetric encryption
            const rsaKeyPair = await window.crypto.subtle.generateKey(
                { name: "RSA-OAEP", modulusLength: 2048, publicExponent: new Uint8Array([1, 0, 1]), hash: { name: "SHA-256" }},
                true,
                ["encrypt", "decrypt"]
            );
            const rsaPrivateKeyExported = await window.crypto.subtle.exportKey("pkcs8", rsaKeyPair.privateKey);
            const rsaPrivateKeyBase64 = btoa(String.fromCharCode(...new Uint8Array(rsaPrivateKeyExported)));
            const rsaPublicKeyExported = await window.crypto.subtle.exportKey("spki", rsaKeyPair.publicKey);
            const rsaPublicKeyBase64 = btoa(String.fromCharCode(...new Uint8Array(rsaPublicKeyExported)));

            console.log("RSA Public Key exported in Base64:", rsaPublicKeyBase64);

            // Store RSA private key locally
            await storePrivateKey(username, rsaPrivateKeyBase64);

            // Hash the password to send to the server for user authentication
            let hashedPassword = CryptoJS.SHA256(password).toString();

            // Send signup data to the server
            try {
                let response = await axios.post("{{ url_for('signup_user') }}", {
                    username: username,
                    password: hashedPassword, // Send hashed password for security
                    public_key: rsaPublicKeyBase64,
                    salt: btoa(String.fromCharCode(...salt)) // Send salt for AES key derivation
                });

                if (response.data.signup) {
                    window.location.href = '/home'; // Redirect to home on successful signup
                } else {
                    alert("Signup failed: " + response.data.msg);
                }
            } catch (error) {
                console.error("Signup error:", error);
                alert("Signup error: " + (error.response ? error.response.data.msg : "Server error"));
            }
        }


        function isValidURL(string) {
            try {
                new URL(string);
                return true;
            } catch (e) {
                return false;
            }
        }

    </script>
{% endblock %}
