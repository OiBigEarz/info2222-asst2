<!-- 
Sign up page, pretty much the same as login.
-->
{% extends 'base.jinja' %}


{% block content %} 
    <h1>Sign Up</h1>
    <p>Username</p>
    <input id="username"/>
    <p>Password</p>
    <input id="password" type="password"/>
    <button onclick="signup()">Sign up</button>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js"></script>
    <script>

         function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }


        function initDatabase() {
            return new Promise((resolve, reject) => {
                const request = indexedDB.open("chatAppDB", 1);  // Ensure the database name and version are consistent

                request.onupgradeneeded = function(event) {
                    const db = event.target.result;
                    if (!db.objectStoreNames.contains("keys")) {
                        db.createObjectStore("keys", { keyPath: "username" });
                    }
                };

                request.onsuccess = function() {
                    resolve(request.result);
                };

                request.onerror = function(event) {
                    console.error("Database error: " + event.target.errorCode);
                    reject(event.target.error);
                };
            });
        }


        async function storePrivateKey(username, privateKeyBase64) {
            const db = await initDatabase();  // Ensuring the database is ready
            const transaction = db.transaction(["keys"], "readwrite");
            const store = transaction.objectStore("keys");
            store.put({username: username, privateKey: privateKeyBase64});
        }

        async function deriveKey(password) {
            const encoder = new TextEncoder();
            const keyMaterial = await window.crypto.subtle.importKey(
                "raw",
                encoder.encode(password),
                "PBKDF2",
                false,
                ["deriveBits", "deriveKey"]
            );
            const salt = window.crypto.getRandomValues(new Uint8Array(16));
            const key = await window.crypto.subtle.deriveKey(
                {
                    name: "PBKDF2",
                    salt: salt,
                    iterations: 100000,
                    hash: "SHA-256"
                },
                keyMaterial,
                { name: "AES-GCM", length: 256 },
                true,
                ["encrypt", "decrypt"]
            );
            return { key, salt };
        }

        async function signup() {
            let username = $("#username").val();
            let password = $("#password").val();

            // Derive AES key from password and generate salt
            const { key, salt } = await deriveKey(password);
            const keyExported = await window.crypto.subtle.exportKey("raw", key);
            const keyBase64 = btoa(String.fromCharCode(...new Uint8Array(keyExported)));
            const saltBase64 = btoa(String.fromCharCode(...salt));

            // RSA key pair generation and handling remains the same
            let keyPair = await window.crypto.subtle.generateKey(
                {
                    name: "RSA-OAEP",
                    modulusLength: 2048,
                    publicExponent: new Uint8Array([1, 0, 1]),
                    hash: {name: "SHA-256"},
                },
                true,
                ["encrypt", "decrypt"]
            );
            const exportedPrivateKey = await window.crypto.subtle.exportKey("pkcs8", keyPair.privateKey);
            const privateKeyBase64 = btoa(String.fromCharCode(...new Uint8Array(exportedPrivateKey)));
            await storePrivateKey(username, privateKeyBase64);

            let exportedPublicKey = await window.crypto.subtle.exportKey("spki", keyPair.publicKey);
            let publicKeyBase64 = btoa(String.fromCharCode(...new Uint8Array(exportedPublicKey)));

            let hashedPassword = CryptoJS.SHA256(password).toString(); // Ensure server never knows the real password

            let signupURL = "{{ url_for('signup_user') }}";
            let res = await axios.post(signupURL, {
                username: username,
                password: hashedPassword, // Send hashed password
                public_key: publicKeyBase64,
                salt: saltBase64  // Send the salt to the server
            });

            if (!isValidURL(res.data)) {
                alert(res.data);
                return;
            }
            window.open(res.data, "_self");
        }

        function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }

    </script>
{% endblock %}
