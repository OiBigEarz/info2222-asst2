<!-- 
    Login page, user is redirected here when the user clicks on Login.
-->

{% extends 'base.jinja' %}

{% block content %} 
    <h1>Login</h1>
    <p>Username</p>
    <input id="username"/>
    <p>Password</p>
    <input id="password"  type="password"/>
    <button onclick="login()">Login</button>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js"></script>
    <script>

        // basically checks if the server returns an Error message instead of a URL
        // this is a pretty terrible way of handling error generated by the server, but it works...
        function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }

        // login function to well login...
        async function login() {
            let username = $("#username").val();
            let password = $("#password").val();
            let hashedPassword = CryptoJS.SHA256(password).toString(); // Hashing the password
            // this fancy syntax is part of the Jinja syntax
            // login_user is a Python function, this gets the URL that calls that Python function
            // you know the one with the:
            // app.route("/login/user", methods=["POST"])
            // login_user()
            // so... "{{ url_for('login_user')}}" 
            // gives us -> "http://blabla/login/user"


            // axios post is a fancy way of posting a request to the server,
            // we pass in the username and password here
            try {
                let response = await axios.post("{{ url_for('login_user') }}", {
                    username: username,
                    password: hashedPassword
                });

                if (response.data.login) {
                    window.location.href = '/home';  // Redirect on successful login
                } else {
                    // Display specific error message from the server
                    alert("Login failed: " + response.data.msg);
                }
            } catch (error) {
                console.error('Login error:', error);
                // Handle the case where the server response might not have the expected format
                alert('Login error: ' + (error.response && error.response.data ? error.response.data.msg : 'Server error'));
            }
        }

    </script>
{% endblock %}
