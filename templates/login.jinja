<!-- 
    Login page, user is redirected here when the user clicks on Login.
-->

{% extends 'base.jinja' %}

{% block content %}
<style>
    body {
        background-image: url('{{ url_for('static', filename='images/woodbackground.jpg') }}');
        background-size: cover;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        font-family: 'Arial', sans-serif;
    }
    .login-container {
        text-align: center;
        width: 300px;
    }
    .login-header {
        background: rgba(255, 255, 255, 0.8);
        padding: 10px 20px; /* Reduced padding */
        margin-bottom: 20px; /* Space between header and inputs */
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    input[type="text"], input[type="password"], button {
        width: 100%;
        padding: 10px;
        margin-bottom: 10px; /* Consistent margin for all inputs and buttons */
        border: 1px solid #ccc;
        border-radius: 5px;
    }
    input[type="text"], input[type="password"] {
        background: rgba(255, 255, 255, 0.95); /* Slightly opaque background for inputs */
    }
    button {
        border: none;
        color: white;
        font-weight: bold;
        cursor: pointer;
    }
    .login-btn {
        background-color: #4CAF50; /* Green */
    }
    .signup-btn {
        background-color: #f44336; /* Red */
        margin-top: 0; /* Reduced space between buttons */
    }
    .nav {
        background-color: #333;
        overflow: hidden;     
        padding: 1rem;  
    }

    .nav ul {
        list-style-type: none;
        padding: 0;
        margin: 0;
            display: flex;
            justify-content: space-around;

    }

    .nav a {
        float: left;
        color: #f2f2f2;
        text-align: center;
        padding: 14px 16px;
        text-decoration: none;
        font-size: 17px;
}
</style>

<div class="login-container">
    <div class="login-header">
        <h1>Login</h1>
    </div>
    <input id="username" type="text" placeholder="Username" required/>
    <input id="password" type="password" placeholder="Password" required/>
    <button onclick="login()" class="login-btn">Login</button>
    <button onclick="window.location='{{ url_for('signup') }}'" class="signup-btn">New User? Sign up here!</button>
</div>


    <script>

        // basically checks if the server returns an Error message instead of a URL
        // this is a pretty terrible way of handling error generated by the server, but it works...
        function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }

        // login function to well login...
        async function login() {
            // this fancy syntax is part of the Jinja syntax
            // login_user is a Python function, this gets the URL that calls that Python function
            // you know the one with the:
            // app.route("/login/user", methods=["POST"])
            // login_user()
            // so... "{{ url_for('login_user')}}" 
            // gives us -> "http://blabla/login/user"
            let loginURL = "{{ url_for('login_user') }}";

            // axios post is a fancy way of posting a request to the server,
            // we pass in the username and password here
            let res = await axios.post(loginURL, {
                username: $("#username").val(),
                password: $("#password").val()
            });

            // if the server sends in an error message, alert() the error message
            if (!isValidURL(res.data)) {
                alert(res.data);
                return;
            }

            // redirects to the URL (ie. res.data),
            // we use _self here since we all hate that moment
            // when the browser opens a new tab
            window.open(res.data, "_self")
        }
    </script>
{% endblock %}
