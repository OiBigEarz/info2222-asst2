<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}

{% block content %} 
<style>
    body {
        background-image: url('{{ url_for('static', filename='images/woodbackground.jpg') }}');
        background-size: cover;
        font-family: 'Arial', sans-serif;
    }
    #main-container {
        display: flex;
        margin: 20px;
    }
    #article-section {
        width: 70%;
        padding: 20px;
        overflow-y: auto;
    }
    #chat-section {
        width: 30%;
        background: rgba(255, 255, 255, 0.9);
        padding: 20px;
        height: 90vh; 
        overflow-y: auto;
        border-left: 1px solid #ccc;
    }

    #user-info {
        text-align: center;
        color: #FFF; /* White text color */
        padding: 10px;
        border-radius: 8px;
        background-color: rgba(0, 0, 0, 0.6); /* Semi-transparent black background */
        position: absolute;
        right: 20px;
        top: 20px;
    }

    .post-user-info {
        font-size: 0.9em;
        color: #666;
        margin-top: 10px;
    }

    article {
        background: #fff;
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .article-title, .article-content, h2, ul {
        font-size: 16px;
        color: #333;
    }
    .controls {
        margin-bottom: 20px;
        text-align: center;
    }
    input, button {
        padding: 10px;
        margin: 5px;
        border-radius: 5px;
        border: 1px solid #ccc;
        font-size: 14px;
    }
    button {
        background-color: #4CAF50;
        color: white;
        cursor: pointer;
    }
    ul {
        list-style-type: none;
        padding: 0;
    }
    li {
        padding: 5px;
        margin-bottom: 5px;
        background: rgba(255, 255, 255, 0.8);
        border-radius: 5px;
    }

    .modal {
        display: none; /* Hidden by default */
        position: absolute; /* Positioned relative to the #article-section */
        z-index: 2; /* Sits on top */
        left: 0;
        top: 0;
        width: 100%; /* Full width of the article-section */
        height: 100%; /* Full height of the article-section */
        background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
    }

    .modal-content {
        position: absolute; /* Position it below the button */
        top: 50px; /* Adjust this value to position the modal below the button */
        left: 50%;
        transform: translateX(-50%); /* Center the modal horizontally */
        background-color: #fefefe;
        padding: 20px;
        border: 1px solid #888;
        width: 80%; /* Relative to the article-section */
        box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0,0,0,0.19);
        border-radius: 10px;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    .close:hover,
    .close:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
    }

    input[type="text"], textarea {
        width: calc(100% - 22px); /* Full width - padding and border */
        padding: 10px;
        margin-top: 8px;
        margin-bottom: 8px;
        display: inline-block;
        border: 1px solid #ccc;
        box-sizing: border-box;
        border-radius: 5px;
    }

    button[type="button"] {
        background-color: #4CAF50;
        color: white;
        padding: 14px 20px;
        margin: 8px 0;
        border: none;
        cursor: pointer;
        width: 100%;
        border-radius: 5px;
    }

    .comment-section {
        background-color: #f9f9f9; /* Light grey background to differentiate comments */
        border: 1px solid #ddd; /* Slight border for definition */
        padding: 10px;
        margin-top: 5px;
        display: none; /* Initially hidden */
        border-radius: 5px;
    }

    .comment {
        font-size: 0.9em;
        color: #555; /* Darker text for readability */
        margin-top: 5px;
        padding: 5px;
        border-bottom: 1px solid #eee; /* Light line between comments */
    }

    textarea {
        width: 95%; /* Slightly less than full width to fit padding */
        margin: 5px 0; /* Space above and below */
        padding: 8px; /* Comfortable padding inside textarea */
        border: 1px solid #ccc; /* Consistent with other inputs */
        border-radius: 4px; /* Rounded corners */
    }

    .expand-article-btn, .close-btn {
        background-color: #4CAF50; /* Green background to stand out */
        color: white;
        padding: 8px 16px;
        margin: 5px;
        border: none;
        cursor: pointer;
        border-radius: 4px;
    }

    .close-btn {
        background-color: #f44336; /* Red background for closing action */
    }

    </style>

<div id="main-container">

    <div id="user-info" style="position: absolute; top: 10px; right: 20px;">
        <span id="username-display">User: "{{ username }}"</span> | <span id="role-display">{{ role }}</span>
    </div>
    
    <div id="article-section">
        <h1>Articles</h1>
        <button id="post-article-btn" onclick="showPostModal()">Post New Article</button>
        <!-- Modal for posting new article -->
        <div id="post-modal" class="modal">
            <div class="modal-content">
                <span class="close" onclick="closeModal()">&times;</span>
                <form id="post-form">
                    <input type="text" id="post-title" placeholder="Title" required>
                    <textarea id="post-content" placeholder="Write your article..." required></textarea>
                    <button type="button" onclick="submitPost()">Post</button>
                </form>
            </div>
        </div>


    </div>

    <div id="chat-section">
        <!-- Placeholder for dynamic content, initially loads friend management -->
        <div id="dynamic-content">
            <!-- Initial content loaded here will be friend management -->
            <div class="message-groups">
                <input id="friend_username" placeholder="Enter username to add">
                <button onclick="sendFriendRequest()">Add Friend</button>
            </div>
            <section class="friend-list">
                <h2>Friends</h2>
                <ul>
                    {% for friend in friends %}
                    <li>
                        {{ friend }}
                        <button onclick="startChat('{{ friend }}')">Chat</button>
                        <button onclick="removeFriend('{{ friend }}')">Remove</button>
                    </li>
                    {% endfor %}
                </ul>
            </section>
            <section class="friend-requests">
                <h2>Friend Requests</h2>
                <ul>
                    {% for request in received_requests %}
                    <li>{{ request.sender }} - <button onclick="acceptFriendRequest({{ request.id }})">Accept</button> <button onclick="rejectFriendRequest({{ request.id }})">Reject</button></li>
                    {% endfor %}
                </ul>
            </section>
            <section class="message-groups">
                <h2>Message Groups</h2>
                <input placeholder="Enter usernames" />
                <button>Create Group Chat</button>
            </section>
        </div>
    </div>
</div>

<script src="/static/js/libs/socket.io.min.js"></script>
<script>
    let room_id = 0;
    let username = "{{ username }}";
    let role = "{{ role }}";

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
     $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room(friend);
        }
    })

    $(document).ready(() => {
        updateUsernameDisplay();
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
        
    })
    
    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color="black") => {
        add_message(msg, color);
    })
    
    // we'll send the message to the server by emitting a "send" event
    function send() { // Not used?
        const receiver = $("#receiver").val();
        const message = $("#message").val();
        $("#message").val("");
        console.log("Sending message:", {username, receiver, message, room_id});
        socket.emit("send", username, receiver, message, room_id);  
    } 

    // we emit a join room event to the server to join a room
    function join_room(friend) {
       
        let receiver = friend;

        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("join", username, receiver, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);

            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();
        });
     
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#chat_box").show();
        backToFriendsList(); 
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }

    // Function to send a friend request
    function sendFriendRequest() {
        const receiver = $("#friend_username").val();  // Assuming you have an input field with id 'friend_username'
        $.ajax({
            url: "/add-friend",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({ sender: "{{ username }}", receiver: receiver }),
            success: function(response) {
                alert("Friend request sent!");
            },
            error: function(xhr, status, error) {
                alert("Error sending friend request: " + xhr.responseText);
            }
        });
    }

    // Function to accept a friend request
    function acceptFriendRequest(requestId) {
        $.ajax({
            url: "/accept-friend-request",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({ request_id: requestId }),
            success: function(response) {
                alert("Friend request accepted!");
                location.reload();  // Reload the page to update the friends list
            },
            error: function(xhr, status, error) {
                alert("Error accepting friend request: " + xhr.responseText);
            }
        });
    }

    // Function to reject a friend request
    function rejectFriendRequest(requestId) {
        $.ajax({
            url: "/reject-friend-request",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({ request_id: requestId }),
            success: function(response) {
                alert("Friend request rejected!");
                location.reload();  // Reload the page to update the list of friend requests
            },
            error: function(xhr, status, error) {
                alert("Error rejecting friend request: " + xhr.responseText);
            }
        });
    }
    
    function startChat(friendUsername) {
        // Trigger join room directly with the friend's username
        join_room(friendUsername);

        // This function will be called when 'Chat' button is clicked
        // It changes the inner HTML of the dynamic-content div to show the chat interface
        const chatInterface = `
            <h2>Chatting with ${friendUsername}</h2>
            <button onclick="leave()">Leave Chat</button>
            <div id="message_box" style="height: 300px; overflow-y: auto; border: 1px solid #ccc; margin-bottom: 10px;"></div>
            <input id="message_input" placeholder="Type a message" onkeyup="if(event.keyCode === 13) sendMessage('${friendUsername}')">
            <button onclick="sendMessage('${friendUsername}')">Send</button>
        `;
        document.getElementById('dynamic-content').innerHTML = chatInterface;
    }

    function backToFriendsList() {
        // Reloads the original friend management interface
        location.reload();
    }

    function sendMessage(friendUsername) {
        const message = document.getElementById('message_input').value;
        document.getElementById('message_input').value = ''; // Clear input after sending

        // Retrieve the username from a global variable or hidden input if not available
        const username = "{{ username }}";  // If you're using Jinja2 templating, otherwise set this from your logged-in user data

        console.log("Sending message:", { username: username, receiver: friendUsername, message: message, room_id: room_id });
        
        // Append the message to the message box for immediate display
        const messageBox = document.getElementById('message_box');
        const msgElement = document.createElement('p');
        messageBox.appendChild(msgElement);

        // Correctly emit the socket event with all required parameters
        socket.emit("send", username, friendUsername, message, room_id);
    }

function removeFriend(friendUsername) {
    if (confirm("Are you sure you want to remove " + friendUsername + " as a friend?")) {
        $.ajax({
            url: "/delete-friend",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({ username: "{{ username }}", friend_username: friendUsername }),
            success: function(response) {
                alert("Friend removed successfully!");
                location.reload();  // Reload the page to update the friends list
            },
            error: function(xhr, status, error) {
                alert("Error removing friend: " + xhr.responseText);
            }
        });
    }
}

// Function to update the username display
function updateUsernameDisplay() {
    document.getElementById('username-display').innerText = `User: ${username}`;
}

function showPostModal() {
    document.getElementById('post-modal').style.display = 'block';
}

function closeModal() {
    document.getElementById('post-modal').style.display = 'none';
}

function submitPost() {
    var title = document.getElementById('post-title').value;
    var content = document.getElementById('post-content').value;
    // Example placeholders for username and role
    var username = "{{ username }}"; 
    var role = "{{ role }}"; // This should come retrieve user role from server

    // Creating new article HTML structure with expand/collapse functionality
    var newArticleHtml = `<article>
        <div class='article-title'>${title}</div>
        <div class='article-content'>${content}</div>
        <div class='post-user-info'>Posted by: ${username} (${role})</div>
        <button class="expand-article-btn" onclick="expandArticle(this)">Read More...</button>
        <div class="comment-section" style="display: none;">
            <textarea placeholder="Add a comment..."></textarea>
            <button onclick="submitComment(this)">Comment</button>
            <button class="close-btn" onclick="collapseArticle(this.parentNode)">X Close</button>
        </div>
    </article>`;

    // Targeting the section where articles should be displayed
    var articleContainer = document.getElementById('article-section');
    // Create a new element to contain the article HTML
    var articleElement = document.createElement('div');
    articleElement.innerHTML = newArticleHtml;
    var newArticle = articleElement.firstChild;

    // Find the position where the new article should be inserted
    // This is the element after which new articles should be placed
    var postButton = document.getElementById('post-article-btn');
    var modal = document.getElementById('post-modal');

    // Insert the new article right after the modal (which is after the button)
    articleContainer.insertBefore(newArticle, modal.nextSibling);

    closeModal(); // Close the modal after posting
}

function expandArticle(button) {
    var article = button.parentNode;
    article.querySelector('.comment-section').style.display = 'block';
    button.style.display = 'none'; // Hide the expand button
}

function collapseArticle(commentSection) {
    commentSection.style.display = 'none'; // Only hide the comment section
    var article = commentSection.parentNode;
    article.querySelector('.expand-article-btn').style.display = 'block'; // Show the expand button again
}

function submitComment(button) {
    var commentBox = button.previousElementSibling;
    var comment = commentBox.value;
    var article = button.closest('article');
    var username = "{{ username }}"; // Replace with server-side code as needed
    var role = "{{ role }}"; // Replace with server-side code as needed

    // Create a div for the comment and style it
    var commentDiv = document.createElement('div');
    commentDiv.className = 'comment';
    commentDiv.textContent = `${username} (${role}): ${comment}`;
    var commentSection = article.querySelector('.comment-section');
    if (commentSection.children.length === 1) {
        commentSection.appendChild(document.createElement('hr')); // Optionally add a separator before first comment
    }
    commentSection.appendChild(commentDiv);

    // Reset the comment box
    commentBox.value = '';
}




</script>
{% endblock %}
