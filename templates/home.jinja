<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}

{% block content %} 
<style>
    body {
        background-image: url('{{ url_for('static', filename='images/woodbackground.jpg') }}');
        background-size: cover;
        font-family: 'Arial', sans-serif;
    }
    #main-container {
        display: flex;
        margin: 20px;
    }
    #article-section {
        width: 70%;
        padding: 20px;
        overflow-y: auto;
    }
    #chat-section {
        width: 30%;
        background: rgba(255, 255, 255, 0.9);
        padding: 20px;
        height: 90vh; 
        overflow-y: auto;
        border-left: 1px solid #ccc;
    }
    article {
        background: #fff;
        margin-bottom: 10px;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .article-title, .article-content, h2, ul {
        font-size: 16px;
        color: #333;
    }
    .controls {
        margin-bottom: 20px;
        text-align: center;
    }
    input, button {
        padding: 10px;
        margin: 5px;
        border-radius: 5px;
        border: 1px solid #ccc;
        font-size: 14px;
    }
    button {
        background-color: #4CAF50;
        color: white;
        cursor: pointer;
    }
    ul {
        list-style-type: none;
        padding: 0;
    }
    li {
        padding: 5px;
        margin-bottom: 5px;
        background: rgba(255, 255, 255, 0.8);
        border-radius: 5px;
    }
</style>

<div id="main-container">
    <div id="article-section">
        <h1>Articles</h1>
        <article>
            <div class="article-title">Article 1</div>
            <div class="article-content">Body Content</div>
        </article>
        <article>
            <div class="article-title">Article 2</div>
            <div class="article-content">Body Content</div>
        </article>
    </div>

    <div id="chat-section">
        <!-- Placeholder for dynamic content, initially loads friend management -->
        <div id="dynamic-content">
            <!-- Initial content loaded here will be friend management -->
            <div class="controls">
                <input id="friend_username" placeholder="Enter username to add">
                <button onclick="sendFriendRequest()">Add Friend</button>
            </div>
            <section class="friend-list">
                <h2>Friends</h2>
                <ul>
                    {% for friend in friends %}
                    <li>{{ friend }} <button onclick="startChat('{{ friend }}')">Chat</button> <button>Remove</button></li>
                    {% endfor %}
                </ul>
            </section>
            <section class="friend-requests">
                <h2>Friend Requests</h2>
                <ul>
                    {% for request in received_requests %}
                    <li>{{ request.sender }} - <button onclick="acceptFriendRequest({{ request.id }})">Accept</button> <button onclick="rejectFriendRequest({{ request.id }})">Reject</button></li>
                    {% endfor %}
                </ul>
            </section>
            <section class="message-groups">
                <h2>Message Groups</h2>
                <input placeholder="Enter usernames" />
                <button>Create Group Chat</button>
            </section>
        </div>
    </div>
</div>

<script src="/static/js/libs/socket.io.min.js"></script>
<script>
    let room_id = 0;

    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
     $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room(friend);
        }
    })

    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the message box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })
    
    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";

    Cookies.set('username', username);

    // initializes the socket
    const socket = io();

    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color="black") => {
        add_message(msg, color);
    })
    
    // we'll send the message to the server by emitting a "send" event
    function send() { // Not used?
        const receiver = $("#receiver").val();
        const message = $("#message").val();
        $("#message").val("");
        socket.emit("send", username, receiver, message, room_id);  
    } 

    // we emit a join room event to the server to join a room
    function join_room(friend) {
       
        let receiver = friend;

        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("join", username, receiver, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            Cookies.set("room_id", room_id);

            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();
        });
     
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave", username, room_id);
        $("#input_box").hide();
        $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }

    // Function to send a friend request
    function sendFriendRequest() {
        const receiver = $("#friend_username").val();  // Assuming you have an input field with id 'friend_username'
        $.ajax({
            url: "/add-friend",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({ sender: "{{ username }}", receiver: receiver }),
            success: function(response) {
                alert("Friend request sent!");
            },
            error: function(xhr, status, error) {
                alert("Error sending friend request: " + xhr.responseText);
            }
        });
    }

    // Function to accept a friend request
    function acceptFriendRequest(requestId) {
        $.ajax({
            url: "/accept-friend-request",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({ request_id: requestId }),
            success: function(response) {
                alert("Friend request accepted!");
                location.reload();  // Reload the page to update the friends list
            },
            error: function(xhr, status, error) {
                alert("Error accepting friend request: " + xhr.responseText);
            }
        });
    }

    // Function to reject a friend request
    function rejectFriendRequest(requestId) {
        $.ajax({
            url: "/reject-friend-request",
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify({ request_id: requestId }),
            success: function(response) {
                alert("Friend request rejected!");
                location.reload();  // Reload the page to update the list of friend requests
            },
            error: function(xhr, status, error) {
                alert("Error rejecting friend request: " + xhr.responseText);
            }
        });
    }
    
    function startChat(friendUsername) {

        // Trigger join room directly with the friend's username
        join_room(friendUsername);

        // This function will be called when 'Chat' button is clicked
        // It changes the inner HTML of the dynamic-content div to show the chat interface
        const chatInterface = `
            <h2>Chatting with ${friendUsername}</h2>
            <button onclick="backToFriendsList()">Leave Chat</button>
            <div id="message_box" style="height: 300px; overflow-y: auto; border: 1px solid #ccc; margin-bottom: 10px;"></div>
            <input id="message_input" placeholder="Type a message" onkeyup="if(event.keyCode === 13) sendMessage('${friendUsername}')">
            <button onclick="sendMessage('${friendUsername}')">Send</button>
        `;
        document.getElementById('dynamic-content').innerHTML = chatInterface;
    }

    function backToFriendsList() {
        // Reloads the original friend management interface
        location.reload();
    }

    function sendMessage(friendUsername) {
        const message = document.getElementById('message_input').value;

        console.log(message)
        document.getElementById('message_input').value = ''; // Clear input after sending
        // Here you would call your socket.emit or other AJAX to send the message
        // For now, we just append it to our message_box

        const messageBox = document.getElementById('message_box'); //Recieve message box
        const msgElement = document.createElement('p'); //New paragraph
        msgElement.textContent = `You: ${message}`; //Your message
        messageBox.appendChild(msgElement); //Append to messagebox children
        // Assuming you have a socket.io setup already
        socket.emit("send", friendUsername, message, room_id); //emit
    }
    
</script>
{% endblock %}
